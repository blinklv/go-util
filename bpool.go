// bpool.go
//
// Author: blinklv <blinklv@icloud.com>
// Create Time: 2020-06-18
// Maintainer: blinklv <blinklv@icloud.com>
// Last Change: 2020-06-18

package util

import (
	"bytes"
	"sync"
)

// BufferPool is a buffer pool which can reduce GC overhead.
type BufferPool struct {
	pool sync.Pool
}

// NewBufferPool creates a BufferPool instance.
func NewBufferPool() *BufferPool {
	return &BufferPool{
		pool: sync.Pool{
			New: func() interface{} {
				return new(bytes.Buffer)
			},
		},
	}
}

// Get fetches a buffer from the pool.
func (bp *BufferPool) Get() *bytes.Buffer {
	return (bp.pool.Get()).(*bytes.Buffer)
}

// Put returns a buffer to the pool.
func (bp *BufferPool) Put(b *bytes.Buffer) {
	b.Reset()
	bp.pool.Put(b)
}

// BytePool is an implementation of httputil.BufferPool interface.
type BytePool struct {
	pool sync.Pool
}

// NewBytePool creates a BytePool instance. The size parameter specifies
// the initial size of each generated byte slice, it must be positive.
func NewBytePool(size int) *BytePool {
	return &BytePool{
		pool: sync.Pool{
			New: func() interface{} {
				return make([]byte, size)
			},
		},
	}
}

// Get fetches a byte slice from the pool.
func (bp *BytePool) Get() []byte {
	return (bp.pool.Get()).([]byte)
}

// Put returns a byte slice to the pool. Carefully, len(b) can't be zero,
// cause BytePool will be used by io.CopyBuffer function.
func (bp *BytePool) Put(b []byte) {
	bp.pool.Put(b)
}
